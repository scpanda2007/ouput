package viso.util.tools;

import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * A custom implementation of a {@code ThreadFactory} that assigns a
 * configurable name to each thread.
 */
public class NamedThreadFactory implements ThreadFactory {

	// the prefix to assign to the name of each thread generated by the factory
	private final String name;

	// a running count of the number of threads generated by this factory
	private final AtomicInteger count;

	/**
	 * Creates a new {@code NamedThreadFactory} that names each thread that
	 * it creates using the given {@code name}.
	 *
	 * @param name the prefix to use for each thread's name
	 */
	public NamedThreadFactory(String name) {
		Objects.checkNull("name", name);
		this.name = name;
		this.count = new AtomicInteger();
	}

	/**
	 * Constructs a new {@code Thread} for the given {@code Runnable}.  The
	 * name of the returned {@code Thread} is equal to the current count of the
	 * number of threads that have been created thus far with this factory
	 * appended to the name used to construct this factory.
	 *
	 * @param r the {@code Runnable} to be executed by the new thread
	 * @return new thread associated with the given {@code Runnable}
	 */
	@Override
	public Thread newThread(Runnable r) {
		return new Thread(r, name + "-" + count.getAndIncrement());
	}

}